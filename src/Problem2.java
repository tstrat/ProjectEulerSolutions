/**
 Problem 2: Even Fibonacci numbers
 ---
 Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 find the sum of the even-valued terms.
 ---

 @author Travis Stratton
 */
public class Problem2 {
    public static void main(String... args){
        // Fibonacci uses the previous two terms and we need a sum as well.
        int term1 = 1;
        int term2 = 2;
        int sumOfEvens = 0;

        // We will loop and shift term 1 and 2 respectively, checking if the new term
        // is even or not and if so adding it to our sum.

        while(term2 < 4000000) {
            if (term2 % 2 == 0) {
                sumOfEvens += term2;
            }
            term2 = term1 + term2;
            term1 = term2 - term1;
        }

        System.out.println(sumOfEvens);

        /*
            You can also do two checks at a time instead of one per loop with the following
         */

        term1 = 1;
        term2 = 2;
        sumOfEvens = term2;  // doing it this way we cant forget to add the first term

        // We will loop and shift term 1 and 2 respectively, checking if the new term
        // is even or not and if so adding it to our sum.

        while(term2 < 4000000) {
            term1 += term2;  // effectively the 3rd term from where it is
            if (term1 % 2 == 0) {
                sumOfEvens += term1;
            }

            term2 += term1;  // effectively making it the 4th term from the original of term1
            if (term2 % 2 == 0) {
                sumOfEvens += term2;
            }

        }

        System.out.println("Second method: " + sumOfEvens);

    }
}
